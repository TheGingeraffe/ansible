---
# Initializes master node for master group, worker nodes for worker group

- name: Join cluster
  hosts: master
  become: yes
  
  tasks:

   - name: Check if node exists
     shell: "kubectl get nodes | grep {{ ansible_host }}"
     register: node_status
   
   - name: Initialize master node
     command: kubeadm init --control-plane-endpoint "{{ hostvars['master']['ansible_eth0']['ipv4']['address'] }}"  --pod-network-cidr=10.0.0.0/16
     when: node_status['stdout'] == ''
   
   - name: List kubeadm join command
     command: kubeadm token create --print-join-command
     register: kubeadm_join

   - name: Set the fact
     set_fact:
      kubeadm_join: "{{ kubeadm_join }}"

- name: Join workers to master
  hosts: workers
  become: yes

  tasks:

  - name: Run kubeadm_join on workers
    command: "{{ hostvars[item]['kubeadm_join'].stdout }}"
    with_items: "{{ groups['master'] }}"

- name: Set up kubectl for non-root user
  hosts: dev
  become: yes
  gather_facts: false

  tasks:

   - name: Make .kube dir for non-root user
     file:
      path: "/home/{{ ansible_user }}/.kube"
      state: directory

   - name: Check for existence of ${KUBECONFIG}
     shell: "echo $KUBECONFIG"
     register: k8_var_check

   - name: Copy kubeadm config
     copy:
      src: /home/theone/projects/ansible/includes/kube_config
      dest: "/home/{{ ansible_user }}/.kube/config"
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: "0644"

   - name: Export config location for current session
     shell: |
      "su - {{ ansible_user|quote }} -c export KUBECONFIG=/home/{{ ansible_user|quote }}/.kube/config
      systemctl daemon-reload
      systemctl restart kubelet"
     when: k8_var_check['stdout'] == ''
     notify: export_kubeconfig
  
  handlers:

   - name: export_kubeconfig
     shell: >
        echo
        'KUBECONFIG="/home/{{ ansible_user|quote }}/.kube/config"'
        >>
        /etc/environment

- name: Label nodes
  hosts: master
  gather_facts: false
  
  tasks:

    - name: Apply roles to worker nodes
      shell: kubectl label node "{{ item }}" node-role.kubernetes.io/worker=
      with_items: "{{ groups['workers'] }}"
      when: 
  
