---
# Playbook for kubernetes cluster pre-checks

# TODO add conditional execution to all command/shell/iptables/lineinfile calls
# TODO get non-idempotent vars out of here
- name: Prechecks
  hosts: dev
  become: yes

  tasks:
    - name: Add Kubernetes apt key
      apt-key:
        id: 54A647F9048D5688D7DA2ABE6A030B21BA07F4FB
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add Kubernetes repo
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present

    - name: Install package dependencies
      apt:
        pkg:
          - iptables
          - arptables
          - ebtables
          - iptables-persistent
          - docker.io
          - apt-transport-https
          - ca-certificates
          - gnupg-agent
          - software-properties-common
          - curl
          - kubeadm
          - kubelet
          - kubectl
        force_apt_get: yes
        update_cache: yes

    - name: Hold back k8s updates
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      with_items:
        - kubeadm
        - kubelet
        - kubectl

    - name: Update iptables options for kubeadm compatibility
      alternatives:
        name: "{{ item }}"
        link: "/usr/sbin/{{ item }}"
        path: "/usr/sbin/{{ item }}-legacy"
      with_items:
        - iptables
        - ip6tables
        - arptables
        - ebtables

- name: Updating firewall rules for master
  hosts: master
  become: yes

  tasks:
    - name: Add iptables rules for master node
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ item }}"
        jump: ACCEPT
      with_items:
        - "6443"
        - "2379:2380"
        - "10250"
        - "10251"
        - "10252"
      notify: "iptables setup"

  handlers:
    - name: iptables_dir
      file:
        path: /etc/iptables
        state: directory
      listen: "iptables setup"

    - name: iptables_save
      shell: "iptables-save > /etc/iptables/rules.v4"
      listen: "iptables setup"

- name: Updating firewall rules for workers
  hosts: workers
  become: yes

  tasks:
    - name: Add iptables rules for worker nodes
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ item }}"
        jump: ACCEPT
      with_items:
        - "10250"
        - "30000:32767"
      notify: "iptables setup"

  handlers:
    - name: iptables_dir
      file:
        path: /etc/iptables
        state: directory
      listen: "iptables setup"

    - name: iptables_save
      shell: "iptables-save > /etc/iptables/rules.v4"
      listen: "iptables setup"

- name: Node config tasks
  hosts: dev
  become: yes

  tasks:
    - name: Set default cgroup driver to systemd
      copy:
        src: /home/theone/projects/ansible/includes/docker_daemon.json
        dest: /etc/docker/daemon.json
        owner: root
        group: root
        mode: "0600"
      notify: "docker setup"

    - name: Setup kubectl for non-root user
      shell: |
        "mkdir -p /home/{ ansible_user }/.kube
        cp /etc/kubernetes/admin.conf /home/{ ansible_user }/.kube/config
        chown { ansible_user }. /home/{ ansible_user }/.kube/config
        export KUBECONFIG=/home/{ ansible_user }/.kube/config
        echo ${KUBECONFIG} >> /etc/environment"
      when: "[[ -z ${KUBECONFIG} ]]"

    - name: Disable swap
      command: swapoff --all
      when: "[[ $(wc -l /proc/swaps) > 1 ]]"

    - name: Check for existence of memory cgroup
      stat:
        path: "/sys/fs/cgroup/memory"
      register: memory_cgroup_check

    - name: Enable memory cgroup if it doesn't exist
      debug:
        msg: "Enabled memory cgroup for {{ ansible_host }}"
      when: memory_cgroup_check.stat.islnk is not defined
      notify: "memory cgroup setup"

  handlers:
    - name: docker_enable
      service: name=docker state=enabled
      listen: "docker setup"

    - name: Create dir for docker systemd
      file:
        path: /etc/systemd/system/docker.service.d
        state: directory
      listen: "docker setup"

    - name: Enable memory cgroup for pi4
      lineinfile:
        path: /boot/firmware/nobtcmd.txt
        regex: "(^.*$)"
        line: >
          net.ifnames=0
          dwc_otg.lpm_enable=0
          console=ttyAMA0,115200
          console=tty1
          root=LABEL=writable
          rootfstype=ext4
          elevator=deadline
          rootwait
          cgroup_enable=memory
          cgroup_memory=1
      listen: "memory cgroup setup"

    - name: Reboot to apply memory cgroup
      reboot:
      listen: "memory cgroup setup"