---
# Playbook for deploying k8s cluster on target hosts

- name: Prechecks
  hosts: dev
  become: yes

  tasks:
    - name: Disable swap
      command: swapoff --all

    - name: Memory cgroup for pi4
      lineinfile:
        path: /boot/firmware/nobtcmd.txt
        regex: "(^.*$)" # end of line
        line: net.ifnames=0 dwc_otg.lpm_enable=0 console=ttyAMA0,115200 console=tty1 root=LABEL=writable rootfstype=ext4 elevator=deadline rootwait cgroup_enable=memory cgroup_memory=1

    - name: Reboot to apply memory cgroup
      reboot:

    # iptables checks start here
    - name: Check if legacy iptables options exist
      apt:
        force_apt_get: yes
        pkg:
          - iptables
          - arptables
          - ebtables

    # Only run this if you have to!
    - name: Update iptables options for kubeadm compatibility
      command: "{{ item }}"
      args:
      with_items:
        - update-alternatives --set iptables /usr/sbin/iptables-legacy
        - update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
        - update-alternatives --set arptables /usr/sbin/arptables-legacy
        - update-alternatives --set ebtables /usr/sbin/ebtables-legacy

- name: Updating firewall rules for master
  hosts: master
  become: yes

  tasks:
    - name: Add iptables rules for master node
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ item }}"
        jump: ACCEPT
      with_items:
        - "6443"
        - "2379:2380"
        - "10250"
        - "10251"
        - "10252"

- name: Updating firewall rules for workers
  hosts: workers
  become: yes

  tasks:
    - name: Add iptables rules for worker nodes
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ item }}"
        jump: ACCEPT
      with_items:
        - "10250"
        - "30000:32767"

# Installing k8s + dependencies

- name: Package installations
  become: yes
  hosts: dev
  tasks:
    - name: Install dependencies
      apt:
        pkg:
          - docker.io
          - apt-transport-https
          - curl
        force_apt_get: yes
        update_cache: yes

    - name: Add Kubernetes repo
      shell: |
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
        cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
        deb https://apt.kubernetes.io/ kubernetes-xenial main
        EOF

    - name: Install kubeadm stuff
      apt:
        update_cache: yes
        force_apt_get: yes
        pkg:
          - kubeadm
          - kubelet
          - kubectl

    - name: Hold back k8s updates
      command: apt-mark hold kubelet kubeadm kubectl

    - name: Enable services
      shell: |
        systemctl enable docker.service

    - name: Set default cgroup driver to systemd
      copy:
        src: /home/theone/projects/ansible/includes/docker_daemon.json
        dest: /etc/docker/daemon.json
        owner: ubuntu
        group: ubuntu
        mode: "0644"

    - name: Create dir for docker systemd
      file:
        path: /etc/systemd/system/docker.service.d
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: "0755"

    - name: Restart affected services
      shell: |
        systemctl daemon-reload
        systemctl restart kubelet
        systemctl restart docker

- name: Initialize control plane node
  hosts: master
  become: yes

  tasks:
    - name: Initialize master node
      command: kubeadm init --control-plane-endpoint "{{ ansible_host }}" --pod-network-cidr=10.0.0.0/16

    - name: Setup kubectl for non-root user
      shell: |
        mkdir -p /home/ubuntu/.kube
        cp /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
        chown ubuntu. /home/ubuntu/.kube/config
        export KUBECONFIG=/home/ubuntu/.kube/config

# Pod network plugin install

- name: Install pod network addon
  hosts: master
  become: yes

  tasks:
   - name: Create NetworkManager conf.d dir
     file:
      path: /etc/NetworkManager/conf.d
      state: directory
      owner: ubuntu
      group: ubuntu
      mode: "0755"
   - name: Create NetworkManager calico.conf
     copy:
      src: /home/theone/projects/ansible/includes/calico.conf
      dest: /etc/NetworkManager/conf.d/calico.conf
      owner: ubuntu
      group: ubuntu
      mode: "0644"
   - name: Acquire and apply Calico manifest
     shell: |
      wget https://docs.projectcalico.org/v3.10/manifests/calico.yaml 
      POD_CIDR="10.0.0.0/16"
      sed -i -e "s?192.168.0.0/16?$POD_CIDR?g" calico.yaml
      kubectl apply -f calico.yaml
      rm calico.yaml

- name: Export join command
  hosts: master
  become: yes

  tasks:
   - name: List kubeadm join command
     command: kubeadm token create --print-join-command
     register: kubeadm_join

- name: Join workers nodes
  hosts: workers
  become: yes

  tasks:
    - name: kubeadm join
      shell: "{{ kubeadm_join }}"

- name: Check status of cluster
  hosts: master
  become: yes

  tasks:
    - name: kubectl list
      command: kubectl get nodes
