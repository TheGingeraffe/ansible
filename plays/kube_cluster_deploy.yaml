---
# Playbook for deploying k8s cluster on target hosts

- name: Prechecks
  hosts: dev
  become: yes

  tasks:
    - name: Disable swap
      command: swapoff --all 

    - name: Memory cgroup for pi4
      lineinfile:
       path: /boot/firmware/nobtcmd.txt
       regex: '(^.*$)' # end of line 
       line: net.ifnames=0 dwc_otg.lpm_enable=0 console=ttyAMA0,115200 console=tty1 root=LABEL=writable rootfstype=ext4 elevator=deadline rootwait cgroup_enable=memory cgroup_memory=1
    
    - name: Reboot to apply memory cgroup
      reboot:

    # iptables checks start here
    - name: Check if legacy iptables options exist
      apt:
        force_apt_get: yes
        pkg:
          - iptables
          - arptables
          - ebtables

# Only run this if you have to!
#  - name: Update iptables options for kubeadm compatibility
#  command: "{{ item }}"
#  args:
# with_items:
#  - update-alternatives --set iptables /usr/sbin/iptables-legacy
#  - update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
#  - update-alternatives --set arptables /usr/sbin/arptables-legacy
#  - update-alternatives --set ebtables /usr/sbin/ebtables-legacy

- name: Updating firewall rules for master
  hosts: master
  become: yes

  tasks:
    - name: Add iptables rules for master node
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ item }}"
        jump: ACCEPT
      with_items:
        - "6443"
        - "2379:2380"
        - "10250"
        - "10251"
        - "10252"

- name: Updating firewall rules for workers
  hosts: workers
  become: yes

  tasks:
    - name: Add iptables rules for worker nodes
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ item }}"
        jump: ACCEPT
      with_items:
        - "10250"
        - "30000:32767"

# Installing k8s + dependencies

- name: Package installations
  become: yes
  hosts: dev
  tasks:

    - name: Install dependencies
      apt:
        pkg:
          - docker.io
          - apt-transport-https
          - curl
        force_apt_get: yes
        update_cache: yes
  
    - name: Add Kubernetes repo
      shell: |
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
        cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
        deb https://apt.kubernetes.io/ kubernetes-xenial main
        EOF

    - name: Install kubeadm stuff
      apt:
        update_cache: yes
        force_apt_get: yes
        pkg:
          - kubeadm
          - kubelet
          - kubectl

    - name: Hold back k8s updates
      command: apt-mark hold kubelet kubeadm kubectl

    - name: Enable services
      shell: |
        systemctl enable docker.service

    - name: Set default cgroup driver to systemd
      copy:
        src: /home/theone/projects/ansible/includes/docker_daemon.json
        dest: /etc/docker/daemon.json
        owner: ubuntu
        group: ubuntu
        mode: "0644"

    - name: Create dir for docker systemd
      file: 
       path: /etc/systemd/system/docker.service.d
       state: directory
       owner: ubuntu
       group: ubuntu
       mode: "0755"
      
    - name: Restart affected services
      shell: |
        systemctl daemon-reload
        systemctl restart kubelet
        systemctl restart docker

#- name: Initialize control plane node
#  hosts: master
#  become: yes
#
#  tasks:
#    - name: Initialize master node
#      command: kubeadm init --control-plane-endpoint 192.168.0.102
#
#    - name: Setup kubectl for non-root user
#      shell: |
#        mkdir -p /home/ubuntu/.kube
#        cp /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
#        chown ubuntu. /home/ubuntu/.kube/config
#        export KUBECONFIG=/home/ubuntu/.kube/conf

# Pod network plugin install

- name: Install pod network addon
  hosts: dev
  become: yes

  tasks:
    # iptables setup
    - name: Pass bridged IPv4 traffic to iptables' chains
      command: sysctl net.bridge.bridge-nf-call-iptables=1
    - name: Open TCP 6783 in
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "6783"
        jump: ACCEPT
    - name: Open TCP 6783 out
      iptables:
        chain: OUTPUT
        protocol: tcp
        destination_port: "6783"
        jump: ACCEPT
    - name: Open UDP 6783/6784 in
      iptables:
        chain: INPUT
        protocol: udp
        destination_port: "6783:6784"
        jump: ACCEPT
    - name: Open UDP 6783/6784 out
      iptables:
        chain: OUTPUT
        protocol: udp
        destination_port: "6783:6784"
        jump: ACCEPT
    # portmap setup
    - name: Install portmap binary to /opt/cni/bin/portmap
      shell: |
        git clone https://github.com/containernetworking/plugins
        ./plugins/build_linux.sh
        cp ./plugins/bin/* /opt/cni/bin/
        chown -R ubuntu. /opt/cni/bin
        rm -rf ./plugins
    - name: Create dir for cni confs
      file: 
       path: /etc/cni/net.d
       state: directory
       owner: ubuntu
       group: ubuntu
       mode: "0755"
    - name: Copy portmap config to /etc/cni/net.d/10-weave.conflist
      copy:
        src: /home/theone/projects/ansible/includes/10-weave.conflist
        dest: /etc/cni/net.d/10-weave.conflist
        owner: ubuntu
        group: ubuntu
        mode: "0644"
    # weave installation
    - name: Install Weave Net
      shell: |
        kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
        kubelet --network-plugin=portmap
    - name: Check pod network is running
      command: kubectl get pods --all-namespaces

- name: Join workers nodes
  hosts: workers
  become: yes

  tasks:
    - name: kubeadm join
      shell: $(kubeadm token create --print-join-command)

- name: Check status of cluster
  hosts: master
  become: yes

  tasks:
    - name: kubectl list
      command: kubectl get nodes
